[{"categories":["博客搭建"],"content":"搭建个人博客","date":"2021-03-26","objectID":"/theme-loveit/","tags":["Hugo"],"title":"搭建Hugo博客并部署到Github","uri":"/theme-loveit/"},{"categories":["博客搭建"],"content":"利用Hugo框架搭建个人博客 初衷 毕业工作也有大半年了，最近一阵子发现，我已经好久没有学习新的技术，而且对什么事情都是三分热度，再这样下去怕是要废了😂 去年可能是因为疫情原因，在家里躺的太久，整个人有点丧😪，做啥事都提不起兴趣。工作后，发现周围的人都很优秀，莫名陷入一种焦虑的情绪中，加上抖音经常推送的一些内容，使我有点浮躁。 我觉得人还是需要给自己设定目标，这样才会有动力激发自己的潜能💃 现在突然想搭建个博客，用于记录工作学习中踩的坑，或是学习总结，或是日常记录…不管怎样，都要坚持更新下去，算是今年给自己立的一个flag吧🤔 废话不多说，第一篇博客就记录下搭建Hugo博客的过程吧。 ","date":"2021-03-26","objectID":"/theme-loveit/:0:0","tags":["Hugo"],"title":"搭建Hugo博客并部署到Github","uri":"/theme-loveit/"},{"categories":["博客搭建"],"content":"安装Hugo Hugo介绍 我之前用过Hexo搭建个人博客，选择Hexo搭建个人博客也是个不错的选择，但就是内容多的时候，每次生成静态资源的速度有点慢。所以这次我就选了Hugo来搭建个人博客，最主要的原因还是因为这个框架是基于go语言开发的，因此它最大的优势就是速度快，效率高😉 Hugo安装很简单，在官网下载所需的安装包，建议直接安装hugo_extended版本，因为LoveIt主题中有一些Features的实现只有extended版本的Hugo支持。 snap install hugo --channel=extended 安装完后，检查安装是否成功： hugo version 接着，我们来创建博客的站点： hugo new site myblog #myblog是你创建站点的名称 ","date":"2021-03-26","objectID":"/theme-loveit/:0:1","tags":["Hugo"],"title":"搭建Hugo博客并部署到Github","uri":"/theme-loveit/"},{"categories":["博客搭建"],"content":"安装主题 LoveIt：A Clean, Elegant but Advanced Hugo Theme 在Hugo主题官网上有很多不同风格的主题可供选择，这里我安装的是LoveIt这款主题。 进入刚创建的博客站点路径，下载LoveIt主题： git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt 主题配置 这里很容易出错，我在配置的时候，一直在报错，后面才发现原来是我的操作不对😵 一定注意 将LoveIt提供的范例站点文件直接覆盖当前站点。 cp themes/LoveIt/exampleSite/* . 并且如果不能访问Instagram网站，还需要删除content/posts/theme-documentation-built-in-shortcodes文件夹，否则会报错。 修改config.toml：关闭获取git信息，注释掉主题目录。 # 是否使用 git 信息 enableGitInfo = false # 主题目录 # themesDir = \"../..\" 配置完主题，我们可以新增一篇博客并预览下效果： # 新增博文 hugo new posts/first.md # 预览效果 hugo serve 我们通过修改config.toml文件，可以自定义配置博客站点的信息，真正实现个人博客的自定义化。 具体参数可以参考👉官网。 ","date":"2021-03-26","objectID":"/theme-loveit/:0:2","tags":["Hugo"],"title":"搭建Hugo博客并部署到Github","uri":"/theme-loveit/"},{"categories":["博客搭建"],"content":"部署到Github 部署到github上，可以通过公网访问个人博客 至此，我们已经搭建完个人博客的站点了，那问题来了，如果别人想访问或者自己通过公网怎么才能访问刚刚搭建的博客呢？接下来我们只需要将博客部署到Github上，就可以通过链接直接访问我们的博客了。 首先在GitHub上创建一个Repository，命名为：xxx.github.io （xxx就是你的github用户名的小写）； 将我们博客的静态资源编译打包： hugo --baseUrl=\"https://xxx.github.io\" --buildDrafts 可以看到博客根目录下多了个public的文件夹，该文件夹的内容就是Hugo生成的整个静态网站内容。接着，只需要进入public文件夹下执行我们熟悉的git提交代码命令，即可通过https://xxx.github.io链接访问个人博客。 cd public git init git add * git commit -m \"第一次提交\" git remote add origin https://github.com/xxx/xxx.github.io.git git push -u origin master 以上👆，我们的个人博客站点就搭建完成了。 ","date":"2021-03-26","objectID":"/theme-loveit/:0:3","tags":["Hugo"],"title":"搭建Hugo博客并部署到Github","uri":"/theme-loveit/"},{"categories":["测试"],"content":"压力测试，性能测试，自动化接口测试，jmeter","date":"2021-03-28","objectID":"/jmeter-base/","tags":["Jmeter","压力测试"],"title":"Jmeter入门教程","uri":"/jmeter-base/"},{"categories":["测试"],"content":"Jmeter安装与使用。 ","date":"2021-03-28","objectID":"/jmeter-base/:0:0","tags":["Jmeter","压力测试"],"title":"Jmeter入门教程","uri":"/jmeter-base/"},{"categories":["测试"],"content":"介绍 The Apache JMeter™ application is open source software, a 100% pure Java application designed to load test functional behavior and measure performance. It was originally designed for testing Web Applications but has since expanded to other test functions. ","date":"2021-03-28","objectID":"/jmeter-base/:0:1","tags":["Jmeter","压力测试"],"title":"Jmeter入门教程","uri":"/jmeter-base/"},{"categories":["测试"],"content":"下载安装 登录Jmeter官网下载，windows选择.zip格式下载，Linux选择.tgz格式下载。 在安装之前，首先要确保电脑已经安装了jdk1.8及以上，然后将下载的压缩包解压，然后在电脑选个路径放进去。在\\apache-jmeter-5.4.1\\bin目录下，找到jmeter.bat，双击就能以界面的形式启动并打开jmeter。 ","date":"2021-03-28","objectID":"/jmeter-base/:0:2","tags":["Jmeter","压力测试"],"title":"Jmeter入门教程","uri":"/jmeter-base/"},{"categories":["测试"],"content":"Jmeter简单压测实例 比如现在我们要对百度这个接口进行压测，主要过程如下： 第一步 在写测试脚本之前，我们首先要了解jmeter里面经常用到的一些基本概念。Jmeter中一个脚本即是一个测试计划，也是一个管理单元。测试计划里面的几个概念： 一个脚本只能出现一个测试计划； 一个测试计划至少要有一个线程组，我们可以把不相关的业务分布在不同的线程组中； 一个测试计划至少要有一个取样器，取样器其实就是我们需要测试的对象； 一个测试计划至少要有一个监听器，监听器主要用来获取测试结果，进而分析系统性能。 第二步 了解测试计划基本概念后，我们来看下线程组里的几个概念： 名称和注释可以随意设置，不过最好设置成与业务相关的有意义的名称； 在取样器错误后执行的动作：继续（出错后会继续执行）、启动下一进程循环（出错后，则同一脚本中的余下请求不再执行，直接重新开始。比如登陆失败，则后续的操作都不可执行）、停止线程（出错后则停止当前线程，不再执行）、停止测试（如果出错则停止所有线程）、立即停止测试（出错会马上停止整个测试场景）； 线程属性：线程数（一个线程对应一个虚拟用户）、Ramp-Up时间（所有线程在多长时间内开始运行。若设置0秒，则开启场景后所有线程立即启动）、循环次数（请求的重复次数）； 调度器：脚本需要执行的时长。 第三步 接下来就是重点，构建脚本，刚刚也提到，取样器其实就是我们要测的对象。以百度为例： 在线程组里添加我们要测的http请求，配置好ip、请求方式、路径、参数等就可以进行测试了。 第四步 我们再添加下监听器，这里添加最常用的察看结果树和聚合报告，就可以来执行脚本了。 第五步 点击运行按钮开始压测，并在刚添加的监听器中查看测试结果。 第六步 就聚合报告的各项参数来看下本次压测百度接口的结果。 #样本：取样器运行次数总和；（这里是访问百度接口的次数） 平均值：请求（事务）的平均响应时间（单位：毫秒）；（请求1次百度接口需要的时间） 中位数：50%的请求的响应时间不超过多少毫秒； 90%百分比：90%的请求的响应时间不超过多少毫秒； 95%百分比：95%的请求的响应时间不超过多少毫秒； 99%百分比：99%的请求的响应时间不超过多少毫秒； 最小值：请求的最小响应时间（单位：毫秒）； 最大值：请求的最长响应时间（单位：毫秒）； 异常%：事务出错率； 吞吐量：吞吐率，即常说的TPS；（服务器每单位时间处理的请求数） 接收KB/sec：每秒接收的数据包流量，单位KB； 发送KB/sec：每秒发送的数据包流量，单位KB； 以上👆 ","date":"2021-03-28","objectID":"/jmeter-base/:0:3","tags":["Jmeter","压力测试"],"title":"Jmeter入门教程","uri":"/jmeter-base/"}]